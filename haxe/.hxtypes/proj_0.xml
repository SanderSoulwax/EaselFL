<haxe>
	<enum path="flash.text.TextFormatAlign" params="" file="/usr/lib/haxe/std/flash9/text/TextFormatAlign.hx">
		<RIGHT/>
		<LEFT/>
		<JUSTIFY/>
		<CENTER/>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="/usr/lib/haxe/std/flash9/display/ColorCorrection.hx">
		<ON/>
		<OFF/>
		<DEFAULT/>
	</enum>
	<enum path="flash.display.StageAlign" params="" file="/usr/lib/haxe/std/flash9/display/StageAlign.hx">
		<TOP_RIGHT/>
		<TOP_LEFT/>
		<TOP/>
		<RIGHT/>
		<LEFT/>
		<BOTTOM_RIGHT/>
		<BOTTOM_LEFT/>
		<BOTTOM/>
	</enum>
	<class path="flash.geom.Matrix3D" params="" file="/usr/lib/haxe/std/flash9/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<c path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" set="null"><c path="Float"/></determinant>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<rawData public="1"><c path="flash.Vector"><c path="Float"/></c></rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<e path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<copyColumnFrom public="1"><f a="column:vector3D">
	<t path="UInt"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyColumnFrom>
		<copyColumnTo public="1"><f a="column:vector3D">
	<t path="UInt"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyColumnTo>
		<copyFrom public="1"><f a="sourceMatrix3D">
	<c path="flash.geom.Matrix3D"/>
	<e path="Void"/>
</f></copyFrom>
		<copyRawDataFrom public="1"><f a="vector:?index:?transpose">
	<c path="flash.Vector"><c path="Float"/></c>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></copyRawDataFrom>
		<copyRawDataTo public="1"><f a="vector:?index:?transpose">
	<c path="flash.Vector"><c path="Float"/></c>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></copyRawDataTo>
		<copyRowFrom public="1"><f a="row:vector3D">
	<t path="UInt"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyRowFrom>
		<copyRowTo public="1"><f a="row:vector3D">
	<t path="UInt"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyRowTo>
		<copyToMatrix3D public="1"><f a="dest">
	<c path="flash.geom.Matrix3D"/>
	<e path="Void"/>
</f></copyToMatrix3D>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" set="method"><f a=""><e path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="Float"/>
	<e path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><e path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<e path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<e path="Bool"/>
</f></recompose>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><e path="Void"/></f></transpose>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="interfaces.IWatchable" params="" file="src/interfaces/IWatchable.hx" interface="1">
		<watch public="1" set="method"><f a="method">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></watch>
		<unwatch public="1" set="method"><f a="method">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></unwatch>
		<haxe_doc>
 * Implemented by objects upon which others are dependent 
 * and need to trigger changes when the dependent object changes.
 </haxe_doc>
	</class>
	<class path="interfaces.IBitmapData" params="" file="src/interfaces/IBitmapData.hx" interface="1">
		<implements path="interfaces.IWatchable"/>
		<bitmapData public="1" set="null"><c path="flash.display.BitmapData"/></bitmapData>
		<ready public="1" set="null"><e path="Bool"/></ready>
	</class>
	<class path="interfaces.IExec" params="" file="src/interfaces/IExec.hx" interface="1"><exec public="1" set="method"><f a="method:?arguments">
	<c path="String"/>
	<d/>
	<d/>
</f></exec></class>
	<class path="flash.events.IEventDispatcher" params="" file="/usr/lib/haxe/std/flash9/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="/usr/lib/haxe/std/flash9/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="display.ImageFl" params="" file="src/display/ImageFl.hx">
		<implements path="interfaces.IWatchable"/>
		<implements path="interfaces.IBitmapData"/>
		<implements path="interfaces.IExec"/>
		<IMAGE_CHANGE get="inline" set="null" line="16" static="1"><c path="String"/></IMAGE_CHANGE>
		<dispatcher line="17" static="1"><c path="flash.events.EventDispatcher"/></dispatcher>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<init public="1" set="method" line="20" static="1"><f a=""><e path="Void"/></f></init>
		<setSource get="inline" set="null" line="34" static="1">
			<f a="target:url">
				<c path="display.ImageFl"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Change the source url of an ImageFl
	 * @param ImageFl
	 * @param String the URL
	 </haxe_doc>
		</setSource>
		<defaultData public="1" set="null" static="1"><c path="flash.display.BitmapData"/></defaultData>
		<ready public="1" set="null"><e path="Bool"/></ready>
		<bitmapData public="1" set="null"><c path="flash.display.BitmapData"/></bitmapData>
		<loader><c path="flash.display.Loader"/></loader>
		<eventID><c path="String"/></eventID>
		<watch public="1" get="inline" set="null" line="62">
			<f a="method">
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Add method to be called when bitmapdata changes
	 * @param Method
	 </haxe_doc>
		</watch>
		<unwatch public="1" get="inline" set="null" line="70">
			<f a="method">
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Remove method to be called when bitmapdata changes
	 * @param Method
	 </haxe_doc>
		</unwatch>
		<handleLoad set="method" line="78">
			<f a="e">
				<c path="flash.events.Event"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Handle load of loader, create new bitmap data 
	 </haxe_doc>
		</handleLoad>
		<exec public="1" get="inline" set="null" line="91">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this ImageFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="49"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="/usr/lib/haxe/std/flash9/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" static="1"><f a=""><e path="Void"/></f></_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<activityLevel public="1" set="null"><c path="Float"/></activityLevel>
		<bandwidth public="1" set="null"><c path="Int"/></bandwidth>
		<currentFPS public="1" set="null"><c path="Float"/></currentFPS>
		<fps public="1" set="null"><c path="Float"/></fps>
		<height public="1" set="null"><c path="Int"/></height>
		<index public="1" set="null"><c path="Int"/></index>
		<keyFrameInterval public="1" set="null"><c path="Int"/></keyFrameInterval>
		<loopback public="1" set="null"><e path="Bool"/></loopback>
		<motionLevel public="1" set="null"><c path="Int"/></motionLevel>
		<motionTimeout public="1" set="null"><c path="Int"/></motionTimeout>
		<muted public="1" set="null"><e path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<quality public="1" set="null"><c path="Int"/></quality>
		<width public="1" set="null"><c path="Int"/></width>
		<setCursor public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<c path="Int"/>
	<e path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method"><f a="?compress">
	<e path="Bool"/>
	<e path="Void"/>
</f></setLoopback>
		<setMode public="1" set="method"><f a="width:height:fps:?favorArea">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setMode>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeout">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.text.TextFormat" params="" file="/usr/lib/haxe/std/flash9/text/TextFormat.hx" extern="1">
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<blockIndent public="1"><t path="Null"><c path="Float"/></t></blockIndent>
		<bold public="1"><t path="Null"><e path="Bool"/></t></bold>
		<bullet public="1"><t path="Null"><e path="Bool"/></t></bullet>
		<color public="1"><t path="Null"><t path="UInt"/></t></color>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<font public="1"><c path="String"/></font>
		<indent public="1"><t path="Null"><c path="Float"/></t></indent>
		<italic public="1"><t path="Null"><e path="Bool"/></t></italic>
		<kerning public="1"><t path="Null"><e path="Bool"/></t></kerning>
		<leading public="1"><t path="Null"><c path="Float"/></t></leading>
		<leftMargin public="1"><t path="Null"><c path="Float"/></t></leftMargin>
		<letterSpacing public="1"><t path="Null"><c path="Float"/></t></letterSpacing>
		<rightMargin public="1"><t path="Null"><c path="Float"/></t></rightMargin>
		<size public="1"><t path="Null"><c path="Float"/></t></size>
		<tabStops public="1"><c path="Array"><t path="UInt"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><t path="Null"><e path="Bool"/></t></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<c path="Float"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="flash.text.TextFormatAlign"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.TriangleCulling" params="" file="/usr/lib/haxe/std/flash9/display/TriangleCulling.hx">
		<POSITIVE/>
		<NONE/>
		<NEGATIVE/>
	</enum>
	<class path="flash.geom.Matrix" params="" file="/usr/lib/haxe/std/flash9/geom/Matrix.hx" extern="1">
		<a public="1"><c path="Float"/></a>
		<b public="1"><c path="Float"/></b>
		<c public="1"><c path="Float"/></c>
		<d public="1"><c path="Float"/></d>
		<tx public="1"><c path="Float"/></tx>
		<ty public="1"><c path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></concat>
		<copyColumnFrom public="1"><f a="column:vector3D">
	<t path="UInt"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyColumnFrom>
		<copyColumnTo public="1"><f a="column:vector3D">
	<t path="UInt"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyColumnTo>
		<copyFrom public="1"><f a="sourceMatrix">
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></copyFrom>
		<copyRowFrom public="1"><f a="row:vector3D">
	<t path="UInt"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyRowFrom>
		<copyRowTo public="1"><f a="row:vector3D">
	<t path="UInt"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyRowTo>
		<createBox public="1" set="method"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createBox>
		<createGradientBox public="1" set="method"><f a="width:height:?rotation:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><e path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><e path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<setTo public="1"><f a="aa:ba:ca:da:txa:tya">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="/usr/lib/haxe/std/flash9/geom/Rectangle.hx" extern="1">
		<bottom public="1"><c path="Float"/></bottom>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<height public="1"><c path="Float"/></height>
		<left public="1"><c path="Float"/></left>
		<right public="1"><c path="Float"/></right>
		<size public="1"><c path="flash.geom.Point"/></size>
		<top public="1"><c path="Float"/></top>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<width public="1"><c path="Float"/></width>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></containsRect>
		<copyFrom public="1"><f a="sourceRect">
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></equals>
		<inflate public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><e path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><e path="Void"/></f></setEmpty>
		<setTo public="1"><f a="xa:ya:widtha:heighta">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method"><f a="?x:?y:?width:?height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="display.FrameFl" params="" file="src/display/FrameFl.hx">
		<implements path="interfaces.IWatchable"/>
		<implements path="interfaces.IExec"/>
		<FRAME_CHANGE get="inline" set="null" line="16" static="1"><c path="String"/></FRAME_CHANGE>
		<dispatcher line="17" static="1"><c path="flash.events.EventDispatcher"/></dispatcher>
		<tmpMtx line="18" static="1"><c path="flash.geom.Matrix"/></tmpMtx>
		<tmpRect line="19" static="1"><c path="flash.geom.Rectangle"/></tmpRect>
		<init public="1" set="method" line="21" static="1"><f a=""><e path="Void"/></f></init>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<x public="1" set="null"><c path="Float"/></x>
		<y public="1" set="null"><c path="Float"/></y>
		<width public="1" set="null"><c path="Float"/></width>
		<height public="1" set="null"><c path="Float"/></height>
		<regX public="1" set="null"><c path="Float"/></regX>
		<regY public="1" set="null"><c path="Float"/></regY>
		<_img><c path="interfaces.IBitmapData"/></_img>
		<_eventID><c path="String"/></_eventID>
		<_initialized><e path="Bool"/></_initialized>
		<watch public="1" get="inline" set="null" line="44"><f a="method">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></watch>
		<unwatch public="1" get="inline" set="null" line="48"><f a="method">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></unwatch>
		<initialize set="method" line="52"><f a="args">
	<d/>
	<e path="Void"/>
</f></initialize>
		<updateBitmap set="method" line="73"><f a="?e">
	<c path="flash.events.Event"/>
	<e path="Void"/>
</f></updateBitmap>
		<exec public="1" get="inline" set="null" line="100">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this FrameFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="40"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.InterpolationMethod" params="" file="/usr/lib/haxe/std/flash9/display/InterpolationMethod.hx">
		<RGB/>
		<LINEAR_RGB/>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="/usr/lib/haxe/std/flash9/text/TextFormatDisplay.hx">
		<INLINE/>
		<BLOCK/>
	</enum>
	<class path="IntIter" params="" file="/usr/lib/haxe/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/usr/lib/haxe/std/flash9/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="Hash" params="T" file="/usr/lib/haxe/std/flash9/_std/Hash.hx">
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="57">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="66">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="flash.media.Microphone" params="" file="/usr/lib/haxe/std/flash9/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" static="1"><f a="?index">
	<c path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1"><f a="?index">
	<c path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getMicrophone>
		<activityLevel public="1" set="null"><c path="Float"/></activityLevel>
		<codec public="1"><e path="flash.media.SoundCodec"/></codec>
		<enableVAD public="1"><e path="Bool"/></enableVAD>
		<encodeQuality public="1"><c path="Int"/></encodeQuality>
		<enhancedOptions public="1"><c path="flash.media.MicrophoneEnhancedOptions"/></enhancedOptions>
		<framesPerPacket public="1"><c path="Int"/></framesPerPacket>
		<gain public="1"><c path="Float"/></gain>
		<index public="1" set="null"><c path="Int"/></index>
		<muted public="1" set="null"><e path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<noiseSuppressionLevel public="1"><c path="Int"/></noiseSuppressionLevel>
		<rate public="1"><c path="Int"/></rate>
		<silenceLevel public="1" set="null"><c path="Float"/></silenceLevel>
		<silenceTimeout public="1" set="null"><c path="Int"/></silenceTimeout>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useEchoSuppression public="1" set="null"><e path="Bool"/></useEchoSuppression>
		<setLoopBack public="1" set="method"><f a="?state">
	<e path="Bool"/>
	<e path="Void"/>
</f></setLoopBack>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeout">
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<e path="Bool"/>
	<e path="Void"/>
</f></setUseEchoSuppression>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.display3D.Context3DProgramType" params="" file="/usr/lib/haxe/std/flash9/display3D/Context3DProgramType.hx">
		<VERTEX/>
		<FRAGMENT/>
	</enum>
	<class path="IntHash" params="T" file="/usr/lib/haxe/std/flash9/_std/IntHash.hx">
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="56">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="65">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.
</haxe_doc>
	</class>
	<class path="flash.text.StyleSheet" params="" file="/usr/lib/haxe/std/flash9/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<d/>
</f></getStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<e path="Void"/>
</f></parseCSS>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></setStyle>
		<transform public="1" set="method"><f a="formatObject">
	<d/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="/usr/lib/haxe/std/flash9/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="/usr/lib/haxe/std/flash9/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
		<alpha public="1"><c path="Float"/></alpha>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<blendShader public="1" get="null"><c path="flash.display.Shader"/></blendShader>
		<cacheAsBitmap public="1"><e path="Bool"/></cacheAsBitmap>
		<filters public="1"><c path="Array"><d/></c></filters>
		<height public="1"><c path="Float"/></height>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<mouseX public="1" set="null"><c path="Float"/></mouseX>
		<mouseY public="1" set="null"><c path="Float"/></mouseY>
		<name public="1"><c path="String"/></name>
		<opaqueBackground public="1"><t path="Null"><t path="UInt"/></t></opaqueBackground>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<rotation public="1"><c path="Float"/></rotation>
		<rotationX public="1"><c path="Float"/></rotationX>
		<rotationY public="1"><c path="Float"/></rotationY>
		<rotationZ public="1"><c path="Float"/></rotationZ>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<scaleX public="1"><c path="Float"/></scaleX>
		<scaleY public="1"><c path="Float"/></scaleY>
		<scaleZ public="1"><c path="Float"/></scaleZ>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<visible public="1"><e path="Bool"/></visible>
		<width public="1"><c path="Float"/></width>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<z public="1"><c path="Float"/></z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Vector3D"/>
</f></globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<e path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method"><f a="x:y:?shapeFlag">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></hitTestPoint>
		<local3DToGlobal public="1" set="method"><f a="point3d">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Point"/>
</f></local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="/usr/lib/haxe/std/flash9/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<doubleClickEnabled public="1"><e path="Bool"/></doubleClickEnabled>
		<focusRect public="1"><d/></focusRect>
		<mouseEnabled public="1"><e path="Bool"/></mouseEnabled>
		<needsSoftKeyboard public="1"><e path="Bool"/></needsSoftKeyboard>
		<softKeyboardInputAreaOfInterest public="1"><c path="flash.geom.Rectangle"/></softKeyboardInputAreaOfInterest>
		<tabEnabled public="1"><e path="Bool"/></tabEnabled>
		<tabIndex public="1"><c path="Int"/></tabIndex>
		<requestSoftKeyboard public="1"><f a=""><e path="Bool"/></f></requestSoftKeyboard>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="/usr/lib/haxe/std/flash9/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1"><e path="Bool"/></mouseChildren>
		<numChildren public="1" set="null"><c path="Int"/></numChildren>
		<tabChildren public="1"><e path="Bool"/></tabChildren>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<e path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChildren public="1"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></removeChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setChildIndex>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<e path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="/usr/lib/haxe/std/flash9/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1"><e path="Bool"/></buttonMode>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useHandCursor public="1"><e path="Bool"/></useHandCursor>
		<startDrag public="1" set="method"><f a="?lockCenter:?bounds">
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></startDrag>
		<startTouchDrag public="1"><f a="touchPointID:?lockCenter:?bounds">
	<c path="Int"/>
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><e path="Void"/></f></stopDrag>
		<stopTouchDrag public="1"><f a="touchPointID">
	<c path="Int"/>
	<e path="Void"/>
</f></stopTouchDrag>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="/usr/lib/haxe/std/flash9/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" set="null"><c path="Int"/></currentFrame>
		<currentFrameLabel public="1" set="null"><c path="String"/></currentFrameLabel>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<enabled public="1"><e path="Bool"/></enabled>
		<framesLoaded public="1" set="null"><c path="Int"/></framesLoaded>
		<isPlaying public="1"><e path="Bool"/></isPlaying>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<totalFrames public="1" set="null"><c path="Int"/></totalFrames>
		<trackAsMenu public="1"><e path="Bool"/></trackAsMenu>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></addFrameScript>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><e path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><e path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><e path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><e path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><e path="Void"/></f></prevScene>
		<stop public="1" set="method"><f a=""><e path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="/usr/lib/haxe/std/flash9/text/TextSnapshot.hx" extern="1">
		<charCount public="1" set="null"><c path="Int"/></charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<e path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getText public="1" set="method"><f a="beginIndex:endIndex:?includeLineEndings">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="String"/>
</f></getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?maxDistance">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></hitTestTextNearPos>
		<setSelectColor public="1" set="method"><f a="?hexColor">
	<t path="UInt"/>
	<e path="Void"/>
</f></setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.utils.Dictionary" params="" file="/usr/lib/haxe/std/flash9/utils/Dictionary.hx" extern="1">
		<new public="1" set="method"><f a="?weakKeys">
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="253" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="270" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="/usr/lib/haxe/std/flash9/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><c path="Float"/></alpha>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<color public="1"><t path="UInt"/></color>
		<inner public="1"><e path="Bool"/></inner>
		<knockout public="1"><e path="Bool"/></knockout>
		<quality public="1"><c path="Int"/></quality>
		<strength public="1"><c path="Float"/></strength>
		<new public="1" set="method"><f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
	<t path="UInt"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.DropShadowFilter" params="" file="/usr/lib/haxe/std/flash9/filters/DropShadowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><c path="Float"/></alpha>
		<angle public="1"><c path="Float"/></angle>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<color public="1"><t path="UInt"/></color>
		<distance public="1"><c path="Float"/></distance>
		<hideObject public="1"><e path="Bool"/></hideObject>
		<inner public="1"><e path="Bool"/></inner>
		<knockout public="1"><e path="Bool"/></knockout>
		<quality public="1"><c path="Int"/></quality>
		<strength public="1"><c path="Float"/></strength>
		<new public="1" set="method"><f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject">
	<c path="Float"/>
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.NativeMenu" params="" file="/usr/lib/haxe/std/flash9/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="/usr/lib/haxe/std/flash9/ui/ContextMenuBuiltInItems.hx" extern="1">
		<forwardAndBack public="1"><e path="Bool"/></forwardAndBack>
		<loop public="1"><e path="Bool"/></loop>
		<play public="1"><e path="Bool"/></play>
		<print public="1"><e path="Bool"/></print>
		<quality public="1"><e path="Bool"/></quality>
		<rewind public="1"><e path="Bool"/></rewind>
		<save public="1"><e path="Bool"/></save>
		<zoom public="1"><e path="Bool"/></zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.Boot" params="" file="/usr/lib/haxe/std/flash9/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" line="53" static="1"><e path="Bool"/></skip_constructor>
		<enum_to_string public="1" set="method" line="84" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="93" static="1"><f a="v:t">
	<d/>
	<d/>
	<e path="Bool"/>
</f></__instanceof>
		<__clear_trace public="1" set="method" line="103" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="111" static="1"><f a="rgb">
	<t path="UInt"/>
	<e path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="115" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="134" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="149" static="1"><f a="v:str">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__unprotect__ set="method" line="191" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<start set="method" line="55"><f a=""><e path="Void"/></f></start>
		<doInitDelay set="method" line="75"><f a="_">
	<unknown/>
	<e path="Void"/>
</f></doInitDelay>
		<init set="method" line="80"><f a=""><e path="Void"/></f></init>
		<new public="1" set="method" line="47"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="/usr/lib/haxe/std/flash9/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="38"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.CapsStyle" params="" file="/usr/lib/haxe/std/flash9/display/CapsStyle.hx">
		<SQUARE/>
		<ROUND/>
		<NONE/>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="/usr/lib/haxe/std/flash9/display/FrameLabel.hx" extern="1">
		<frame public="1" set="null"><c path="Int"/></frame>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IGraphicsData" params="" file="/usr/lib/haxe/std/flash9/display/IGraphicsData.hx" extern="1" interface="1"/>
	<class path="flash.geom.Transform" params="" file="/usr/lib/haxe/std/flash9/geom/Transform.hx" extern="1">
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<matrix3D public="1"><c path="flash.geom.Matrix3D"/></matrix3D>
		<perspectiveProjection public="1"><c path="flash.geom.PerspectiveProjection"/></perspectiveProjection>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<getRelativeMatrix3D public="1" set="method"><f a="relativeTo">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Matrix3D"/>
</f></getRelativeMatrix3D>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="/usr/lib/haxe/std/flash9/text/TextFieldAutoSize.hx">
		<RIGHT/>
		<NONE/>
		<LEFT/>
		<CENTER/>
	</enum>
	<class path="Class" params="T" file="/usr/lib/haxe/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<enum path="flash.display.GradientType" params="" file="/usr/lib/haxe/std/flash9/display/GradientType.hx">
		<RADIAL/>
		<LINEAR/>
	</enum>
	<class path="interfaces.IDisplayable" params="" file="src/interfaces/IDisplayable.hx" interface="1"><display public="1"><c path="flash.display.Sprite"/></display></class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="/usr/lib/haxe/std/flash9/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><t path="UInt"/></errno>
		<stub public="1"><e path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<e path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><t path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<t path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<t path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.text.TextLineMetrics" params="" file="/usr/lib/haxe/std/flash9/text/TextLineMetrics.hx" extern="1">
		<ascent public="1"><c path="Float"/></ascent>
		<descent public="1"><c path="Float"/></descent>
		<height public="1"><c path="Float"/></height>
		<leading public="1"><c path="Float"/></leading>
		<width public="1"><c path="Float"/></width>
		<x public="1"><c path="Float"/></x>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="/usr/lib/haxe/std/flash9/display/ColorCorrectionSupport.hx">
		<UNSUPPORTED/>
		<DEFAULT_ON/>
		<DEFAULT_OFF/>
	</enum>
	<class path="geom.RectangleFl" params="" file="src/geom/RectangleFl.hx">
		<implements path="interfaces.IWatchable"/>
		<implements path="interfaces.IExec"/>
		<RECT_CHANGE get="inline" set="null" line="13" static="1"><c path="String"/></RECT_CHANGE>
		<dispatcher line="14" static="1"><c path="flash.events.EventDispatcher"/></dispatcher>
		<init public="1" set="method" line="16" static="1"><f a=""><e path="Void"/></f></init>
		<rect public="1"><c path="flash.geom.Rectangle"/></rect>
		<eventID><c path="String"/></eventID>
		<watch public="1" get="inline" set="null" line="31"><f a="method">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></watch>
		<unwatch public="1" get="inline" set="null" line="35"><f a="method">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></unwatch>
		<dimensions set="method" line="39"><f a="args">
	<d/>
	<e path="Void"/>
</f></dimensions>
		<exec public="1" get="inline" set="null" line="47"><f a="method:?arguments">
	<c path="String"/>
	<d/>
	<d/>
</f></exec>
		<new public="1" set="method" line="26"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="/usr/lib/haxe/std/flash9/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1"><t path="UInt"/></MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<domainMemory public="1"><c path="flash.utils.ByteArray"/></domainMemory>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></getDefinition>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></hasDefinition>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.Lib" params="" file="/usr/lib/haxe/std/flash9/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<getTimer public="1" get="inline" set="null" line="31" static="1"><f a=""><c path="Int"/></f></getTimer>
		<eval public="1" set="method" line="35" static="1"><f a="path">
	<c path="String"/>
	<d/>
</f></eval>
		<getURL public="1" set="method" line="55" static="1"><f a="url:?target">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<e path="Void"/>
</f></getURL>
		<fscommand public="1" set="method" line="63" static="1"><f a="cmd:?param">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></fscommand>
		<trace public="1" set="method" line="67" static="1"><f a="arg">
	<d/>
	<e path="Void"/>
</f></trace>
		<attach public="1" set="method" line="71" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.display.MovieClip"/>
</f></attach>
		<as public="1" params="T" get="inline" set="null" line="76" static="1"><f a="v:c">
	<d/>
	<c path="Class"><c path="as.T"/></c>
	<t path="Null"><c path="as.T"/></t>
</f></as>
	</class>
	<class path="display.DisplayObjectFl" params="" file="src/display/DisplayObjectFl.hx">
		<implements path="interfaces.IDisplayable"/>
		<mapMethods public="1" set="method" line="17" static="1"><f a="execs">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></mapMethods>
		<opacity get="inline" set="null" line="40" static="1"><f a="target:val">
	<c path="interfaces.IDisplayable"/>
	<c path="Float"/>
	<e path="Void"/>
</f></opacity>
		<visible get="inline" set="null" line="44" static="1"><f a="target:val">
	<c path="interfaces.IDisplayable"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></visible>
		<setMatrix get="inline" set="null" line="48" static="1"><f a="target:vals">
	<c path="interfaces.IDisplayable"/>
	<c path="Array"><c path="Float"/></c>
	<e path="Void"/>
</f></setMatrix>
		<hitTestPoint get="inline" set="null" line="62" static="1"><f a="target:xy">
	<c path="interfaces.IDisplayable"/>
	<c path="Array"><c path="Float"/></c>
	<e path="Bool"/>
</f></hitTestPoint>
		<addClickHandler get="inline" set="null" line="68" static="1"><f a="target:?nada">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></addClickHandler>
		<addOverHandler get="inline" set="null" line="72" static="1"><f a="target:?nada">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></addOverHandler>
		<addOutHandler get="inline" set="null" line="76" static="1"><f a="target:?nada">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></addOutHandler>
		<addPressHandler get="inline" set="null" line="80" static="1"><f a="target:?nada">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></addPressHandler>
		<removeClickHandler get="inline" set="null" line="84" static="1"><f a="target:?nada">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></removeClickHandler>
		<removeOverHandler get="inline" set="null" line="88" static="1"><f a="target:?nada">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></removeOverHandler>
		<removeOutHandler get="inline" set="null" line="92" static="1"><f a="target:?nada">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></removeOutHandler>
		<removePressHandler get="inline" set="null" line="96" static="1"><f a="target:?nada">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></removePressHandler>
		<setMouseEnabled get="inline" set="null" line="100" static="1"><f a="target:isOn">
	<c path="display.DisplayObjectFl"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setMouseEnabled>
		<setHandCursor get="inline" set="null" line="104" static="1"><f a="target:isOn">
	<c path="display.DisplayObjectFl"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setHandCursor>
		<setButtonMode get="inline" set="null" line="108" static="1"><f a="target:isOn">
	<c path="display.DisplayObjectFl"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setButtonMode>
		<setMask get="inline" set="null" line="112" static="1"><f a="target:maskID">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></setMask>
		<setShadow get="inline" set="null" line="118" static="1"><f a="target:id">
	<c path="display.DisplayObjectFl"/>
	<d/>
	<e path="Void"/>
</f></setShadow>
		<setFilters get="inline" set="null" line="140" static="1"><f a="target:ids">
	<c path="display.DisplayObjectFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></setFilters>
		<lastMoveEvtTime line="162" static="1"><c path="Float"/></lastMoveEvtTime>
		<handleStageMove set="method" line="164" static="1"><f a="e">
	<c path="flash.events.MouseEvent"/>
	<e path="Void"/>
</f></handleStageMove>
		<handleStageUp set="method" line="174" static="1"><f a="e">
	<c path="flash.events.MouseEvent"/>
	<e path="Void"/>
</f></handleStageUp>
		<display public="1">
			<c path="flash.display.Sprite"/>
			<haxe_doc> Instance </haxe_doc>
		</display>
		<id public="1"><c path="Int"/></id>
		<_shadow><c path="display.ShadowFl"/></_shadow>
		<_filterFls><c path="Array"><c path="interfaces.IBitmapFilter"/></c></_filterFls>
		<handleClick public="1" set="method" line="193"><f a="e">
	<c path="flash.events.MouseEvent"/>
	<e path="Void"/>
</f></handleClick>
		<handleOver public="1" set="method" line="198"><f a="e">
	<c path="flash.events.MouseEvent"/>
	<e path="Void"/>
</f></handleOver>
		<handleOut public="1" set="method" line="203"><f a="e">
	<c path="flash.events.MouseEvent"/>
	<e path="Void"/>
</f></handleOut>
		<handlePress public="1" set="method" line="208"><f a="e">
	<c path="flash.events.MouseEvent"/>
	<e path="Void"/>
</f></handlePress>
		<handleShadowUpdate public="1" set="method" line="219"><f a="?e">
	<d/>
	<e path="Void"/>
</f></handleShadowUpdate>
		<new public="1" set="method" line="191"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="display.BitmapAnimationFl" params="" file="src/display/BitmapAnimationFl.hx">
		<extends path="display.DisplayObjectFl"/>
		<implements path="interfaces.IExec"/>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<tmpMtx line="19" static="1"><c path="flash.geom.Matrix"/></tmpMtx>
		<tmpRect line="20" static="1"><c path="flash.geom.Rectangle"/></tmpRect>
		<init public="1" set="method" line="22" static="1"><f a=""><e path="Void"/></f></init>
		<mapMethods public="1" set="method" line="27" static="1"><f a="execs">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></mapMethods>
		<setFrame get="inline" set="null" line="33" static="1"><f a="target:frameID">
	<c path="display.BitmapAnimationFl"/>
	<d/>
	<e path="Void"/>
</f></setFrame>
		<setSmoothing get="inline" set="null" line="37" static="1"><f a="target:smoothing">
	<c path="display.BitmapAnimationFl"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setSmoothing>
		<bmp><c path="flash.display.Bitmap"/></bmp>
		<smoothing><e path="Bool"/></smoothing>
		<loaded public="1" set="null"><e path="Bool"/></loaded>
		<_frame><c path="display.FrameFl"/></_frame>
		<swapFrame set="method" line="54"><f a="frame">
	<c path="display.FrameFl"/>
	<e path="Void"/>
</f></swapFrame>
		<updateBitmap set="method" line="76"><f a="?e">
	<c path="flash.events.Event"/>
	<e path="Void"/>
</f></updateBitmap>
		<exec public="1" get="inline" set="null" line="90">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this BitmapAnimationFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="46"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="display.BitmapFl" params="" file="src/display/BitmapFl.hx">
		<extends path="display.DisplayObjectFl"/>
		<implements path="interfaces.IExec"/>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<tmpMtx line="18" static="1"><c path="flash.geom.Matrix"/></tmpMtx>
		<tmpRect line="19" static="1"><c path="flash.geom.Rectangle"/></tmpRect>
		<init public="1" set="method" line="21" static="1"><f a=""><e path="Void"/></f></init>
		<mapMethods public="1" set="method" line="26" static="1"><f a="execs">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></mapMethods>
		<setImage get="inline" set="null" line="33" static="1"><f a="target:id">
	<c path="display.BitmapFl"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setImage>
		<setSmoothing get="inline" set="null" line="37" static="1"><f a="target:smoothing">
	<c path="display.BitmapFl"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setSmoothing>
		<setRectangle get="inline" set="null" line="41" static="1"><f a="target:id">
	<c path="display.BitmapFl"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setRectangle>
		<bmp><c path="flash.display.Bitmap"/></bmp>
		<smoothing><e path="Bool"/></smoothing>
		<loaded public="1" set="null"><e path="Bool"/></loaded>
		<_img><c path="interfaces.IBitmapData"/></_img>
		<_rect><c path="geom.RectangleFl"/></_rect>
		<swapImage set="method" line="59"><f a="image">
	<c path="interfaces.IBitmapData"/>
	<e path="Void"/>
</f></swapImage>
		<swapRect set="method" line="80"><f a="rect">
	<c path="geom.RectangleFl"/>
	<e path="Void"/>
</f></swapRect>
		<updateBitmap set="method" line="99"><f a="?e">
	<c path="flash.events.Event"/>
	<e path="Void"/>
</f></updateBitmap>
		<exec public="1" get="inline" set="null" line="127">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this BitmapFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="51"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="interfaces.IBitmapFilter" params="" file="src/interfaces/IBitmapFilter.hx" interface="1"><filter public="1" set="null"><c path="flash.filters.BitmapFilter"/></filter></class>
	<class path="filters.ColorFilterFl" params="" file="src/filters/ColorFilterFl.hx">
		<implements path="interfaces.IBitmapFilter"/>
		<implements path="interfaces.IExec"/>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<init public="1" set="method" line="16" static="1"><f a=""><e path="Void"/></f></init>
		<updateFilter get="inline" set="null" line="38" static="1">
			<f a="target:a">
				<c path="filters.ColorFilterFl"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Change the filter's attributes
	 * @param ColorFilterFl
	 * @param Array
	 </haxe_doc>
		</updateFilter>
		<eventID><c path="String"/></eventID>
		<colorString><c path="String"/></colorString>
		<filter public="1" set="null"><c path="flash.filters.BitmapFilter"/></filter>
		<_filter><c path="flash.filters.ColorMatrixFilter"/></_filter>
		<exec public="1" get="inline" set="null" line="58">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this ColorFilterFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="27"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="/usr/lib/haxe/std/flash9/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><e path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><e path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><e path="Bool"/></silent>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="/usr/lib/haxe/std/flash9/net/URLRequestHeader.hx" extern="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="/usr/lib/haxe/std/flash9/system/SecurityDomain.hx" extern="1"><currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain></class>
	<enum path="flash.display.PixelSnapping" params="" file="/usr/lib/haxe/std/flash9/display/PixelSnapping.hx">
		<NEVER/>
		<AUTO/>
		<ALWAYS/>
	</enum>
	<class path="flash.display3D.textures.TextureBase" params="" file="/usr/lib/haxe/std/flash9/display3D/textures/TextureBase.hx" extern="1"><dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose></class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="/usr/lib/haxe/std/flash9/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:side:?miplevel">
	<c path="flash.display.BitmapData"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:side:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadFromByteArray>
	</class>
	<class path="EReg" params="" file="/usr/lib/haxe/std/flash9/_std/EReg.hx">
		<r><c path="flash.utils.RegExp"/></r>
		<result><c path="+Array"/></result>
		<match public="1" set="method" line="35">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the regular expression matches the String.
		Updates the internal state accordingly.
	</haxe_doc>
		</match>
		<matched public="1" set="method" line="40">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.
	</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="44">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was as the left of
		of the matched substring.
	</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="50">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was at the right of
		of the matched substring.
	</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="57">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>
		Returns the position of the matched substring within the
		original matched string.
	</haxe_doc>
		</matchedPos>
		<split public="1" set="method" line="62">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split a string by using the regular expression to match
		the separators.
	</haxe_doc>
		</split>
		<replace public="1" set="method" line="68">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.
	</haxe_doc>
		</replace>
		<customReplace public="1" set="method" line="72">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>
		For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.
	</haxe_doc>
		</customReplace>
		<new public="1" set="method" line="31"><f a="r:opt">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.
</haxe_doc>
	</class>
	<class path="utils.CSSFont" params="" file="src/utils/CSSFont.hx">
		<boldRgx get="inline" set="null" line="10" static="1"><c path="EReg"/></boldRgx>
		<italicRgx get="inline" set="null" line="11" static="1"><c path="EReg"/></italicRgx>
		<DEFAULT_FONT get="inline" set="null" line="13" static="1"><c path="String"/></DEFAULT_FONT>
		<DEFAULT_SIZE get="inline" set="null" line="14" static="1"><c path="Float"/></DEFAULT_SIZE>
		<font public="1" set="null" static="1"><c path="String"/></font>
		<size public="1" set="null" static="1"><c path="Float"/></size>
		<bold public="1" set="null" static="1"><e path="Bool"/></bold>
		<italic public="1" set="null" static="1"><e path="Bool"/></italic>
		<parse public="1" set="method" line="21" static="1"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></parse>
	</class>
	<class path="display.ContainerFl" params="" file="src/display/ContainerFl.hx">
		<extends path="display.DisplayObjectFl"/>
		<implements path="interfaces.IExec"/>
		<execs static="1">
			<c path="Hash"><d/></c>
			<haxe_doc>
 * TODO: handle sortChildren, getObjectsUnderPoint, clone
 </haxe_doc>
		</execs>
		<init public="1" set="method" line="17" static="1"><f a=""><e path="Void"/></f></init>
		<mapMethods public="1" set="method" line="22" static="1"><f a="excs">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></mapMethods>
		<addChild get="inline" set="null" line="33" static="1"><f a="target:id">
	<c path="display.ContainerFl"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addChild>
		<addChildAt get="inline" set="null" line="40" static="1">
			<f a="target:props">
				<c path="display.ContainerFl"/>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Add child at index; props is array in form ['id', index]
	 </haxe_doc>
		</addChildAt>
		<removeChild get="inline" set="null" line="44" static="1"><f a="target:id">
	<c path="display.ContainerFl"/>
	<c path="Int"/>
	<e path="Void"/>
</f></removeChild>
		<removeChildAt get="inline" set="null" line="55" static="1"><f a="target:index">
	<c path="display.ContainerFl"/>
	<c path="Int"/>
	<e path="Void"/>
</f></removeChildAt>
		<removeAllChildren get="inline" set="null" line="62" static="1"><f a="target:?nada">
	<c path="display.ContainerFl"/>
	<d/>
	<e path="Void"/>
</f></removeAllChildren>
		<swapChildren get="inline" set="null" line="69" static="1"><f a="target:props">
	<c path="display.ContainerFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></swapChildren>
		<swapChildrenAt get="inline" set="null" line="73" static="1"><f a="target:props">
	<c path="display.ContainerFl"/>
	<c path="Array"><c path="Int"/></c>
	<e path="Void"/>
</f></swapChildrenAt>
		<container public="1"><c path="flash.display.Sprite"/></container>
		<exec public="1" set="method" line="89">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this ContainerFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="79"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="display.StageFl" params="" file="src/display/StageFl.hx">
		<extends path="display.ContainerFl"/>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<init public="1" set="method" line="16" static="1"><f a=""><e path="Void"/></f></init>
		<mapMethods set="method" line="21" static="1"><f a="excs">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></mapMethods>
		<blit set="method" line="27" static="1"><f a="target:?nada">
	<a>
		<display set="null"><unknown/></display>
		<blitBitmapData set="null"><a><draw set="null"><f a="">
	<unknown/>
	<unknown/>
</f></draw></a></blitBitmapData>
		<blitBitmap set="null"><a><visible><e path="Bool"/></visible></a></blitBitmap>
	</a>
	<d/>
	<e path="Void"/>
</f></blit>
		<clear set="method" line="32" static="1"><f a="target:?nada">
	<a>
		<blitBitmapData set="null"><a>
	<rect set="null"><unknown/></rect>
	<fillRect set="null"><f a=":">
	<unknown/>
	<c path="Int"/>
	<unknown/>
</f></fillRect>
</a></blitBitmapData>
		<blitBitmap set="null"><a><visible><e path="Bool"/></visible></a></blitBitmap>
	</a>
	<d/>
	<e path="Void"/>
</f></clear>
		<blitBitmap public="1" set="null"><c path="flash.display.Bitmap"/></blitBitmap>
		<blitBitmapData><c path="flash.display.BitmapData"/></blitBitmapData>
		<stage><c path="flash.display.Stage"/></stage>
		<handleResize set="method" line="53">
			<f a="e">
				<c path="flash.events.Event"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Create resized bitmap
	 </haxe_doc>
		</handleResize>
		<exec public="1" set="method" line="63" override="1">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this StageFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="41"><f a="id:stage">
	<c path="Int"/>
	<c path="flash.display.Stage"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="/usr/lib/haxe/std/flash9/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><e path="Bool"/></available>
		<marshallExceptions public="1" static="1"><e path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="/usr/lib/haxe/std/flash9/net/NetStreamInfo.hx" extern="1">
		<SRTT public="1" set="null"><c path="Float"/></SRTT>
		<audioBufferByteLength public="1" set="null"><c path="Float"/></audioBufferByteLength>
		<audioBufferLength public="1" set="null"><c path="Float"/></audioBufferLength>
		<audioByteCount public="1" set="null"><c path="Float"/></audioByteCount>
		<audioBytesPerSecond public="1" set="null"><c path="Float"/></audioBytesPerSecond>
		<audioLossRate public="1" set="null"><c path="Float"/></audioLossRate>
		<byteCount public="1" set="null"><c path="Float"/></byteCount>
		<currentBytesPerSecond public="1" set="null"><c path="Float"/></currentBytesPerSecond>
		<dataBufferByteLength public="1" set="null"><c path="Float"/></dataBufferByteLength>
		<dataBufferLength public="1" set="null"><c path="Float"/></dataBufferLength>
		<dataByteCount public="1" set="null"><c path="Float"/></dataByteCount>
		<dataBytesPerSecond public="1" set="null"><c path="Float"/></dataBytesPerSecond>
		<droppedFrames public="1" set="null"><c path="Float"/></droppedFrames>
		<isLive public="1" set="null"><e path="Bool"/></isLive>
		<maxBytesPerSecond public="1" set="null"><c path="Float"/></maxBytesPerSecond>
		<metaData public="1" set="null"><d/></metaData>
		<playbackBytesPerSecond public="1" set="null"><c path="Float"/></playbackBytesPerSecond>
		<resourceName public="1" set="null"><c path="String"/></resourceName>
		<uri public="1" set="null"><c path="String"/></uri>
		<videoBufferByteLength public="1" set="null"><c path="Float"/></videoBufferByteLength>
		<videoBufferLength public="1" set="null"><c path="Float"/></videoBufferLength>
		<videoByteCount public="1" set="null"><c path="Float"/></videoByteCount>
		<videoBytesPerSecond public="1" set="null"><c path="Float"/></videoBytesPerSecond>
		<videoLossRate public="1"><c path="Float"/></videoLossRate>
		<xmpData public="1" set="null"><d/></xmpData>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<d/>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Stage3D" params="" file="/usr/lib/haxe/std/flash9/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<context3D public="1" set="null"><c path="flash.display3D.Context3D"/></context3D>
		<transparent public="1"><e path="Bool"/></transparent>
		<visible public="1"><e path="Bool"/></visible>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode">
	<c path="String"/>
	<e path="Void"/>
</f></requestContext3D>
	</class>
	<class path="utils.CSSColor" params="" file="src/utils/CSSColor.hx">
		<hex3 get="inline" set="null" line="46" static="1"><c path="EReg"/></hex3>
		<hex6 get="inline" set="null" line="47" static="1"><c path="EReg"/></hex6>
		<rgb1 get="inline" set="null" line="48" static="1"><c path="EReg"/></rgb1>
		<rgb2 get="inline" set="null" line="49" static="1"><c path="EReg"/></rgb2>
		<rgba1 get="inline" set="null" line="50" static="1"><c path="EReg"/></rgba1>
		<rgba2 get="inline" set="null" line="51" static="1"><c path="EReg"/></rgba2>
		<hsl get="inline" set="null" line="52" static="1"><c path="EReg"/></hsl>
		<hsla get="inline" set="null" line="53" static="1"><c path="EReg"/></hsla>
		<color public="1" set="null" static="1"><c path="Int"/></color>
		<alpha public="1" set="null" static="1"><c path="Float"/></alpha>
		<_names line="59" static="1"><d/></_names>
		<parse public="1" set="method" line="209" static="1"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></parse>
		<rgb2hex set="method" line="293" static="1"><f a="rgb">
	<c path="Array"><c path="String"/></c>
	<c path="Int"/>
</f></rgb2hex>
		<hsl2hex set="method" line="315" static="1"><f a="hsl">
	<c path="Array"><c path="String"/></c>
	<c path="Int"/>
</f></hsl2hex>
		<hue2rgb set="method" line="336" static="1"><f a="m1:m2:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></hue2rgb>
		<haxe_doc>
 * Based on the class from FlashCanvas.
 * 
 * Example:
 * 
 * CSSColor.parse('#FF0000');
 * trace(CSSColor.color+', '+CSSColor.alpha);
 </haxe_doc>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="/usr/lib/haxe/std/flash9/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><c path="Float"/></len>
		<offset public="1"><c path="Float"/></offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><c path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><c path="String"/></transition>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderPrecision" params="" file="/usr/lib/haxe/std/flash9/display/ShaderPrecision.hx">
		<FULL/>
		<FAST/>
	</enum>
	<class path="flash.errors.Error" params="" file="/usr/lib/haxe/std/flash9/errors/Error.hx" extern="1">
		<length public="1" static="1"><c path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<c path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<c path="Class"><d/></c>
	<t path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<errorID public="1" set="null"><c path="Int"/></errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="filters.ColorMatrixFilterFl" params="" file="src/filters/ColorMatrixFilterFl.hx">
		<implements path="interfaces.IBitmapFilter"/>
		<implements path="interfaces.IExec"/>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<init public="1" set="method" line="16" static="1"><f a=""><e path="Void"/></f></init>
		<updateFilter get="inline" set="null" line="27" static="1">
			<f a="target:args">
				<c path="filters.ColorMatrixFilterFl"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Change the filter's attributes
	 * @param ColorMatrixFilterFl
	 * @param Array
	 </haxe_doc>
		</updateFilter>
		<getAngleFromOffsets get="inline" set="null" line="31" static="1"><f a="ox:oy">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></getAngleFromOffsets>
		<eventID><c path="String"/></eventID>
		<colorString><c path="String"/></colorString>
		<filter public="1" set="null"><c path="flash.filters.BitmapFilter"/></filter>
		<_filter><c path="flash.filters.ColorMatrixFilter"/></_filter>
		<exec public="1" get="inline" set="null" line="50">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this ColorMatrixFilterFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="40"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Stage" params="" file="/usr/lib/haxe/std/flash9/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1"><e path="flash.display.StageAlign"/></align>
		<allowsFullScreen public="1"><e path="Bool"/></allowsFullScreen>
		<color public="1"><t path="UInt"/></color>
		<colorCorrection public="1"><e path="flash.display.ColorCorrection"/></colorCorrection>
		<colorCorrectionSupport public="1" set="null"><e path="flash.display.ColorCorrectionSupport"/></colorCorrectionSupport>
		<displayContextInfo public="1"><c path="String"/></displayContextInfo>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<frameRate public="1"><c path="Float"/></frameRate>
		<fullScreenHeight public="1" set="null"><t path="UInt"/></fullScreenHeight>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenWidth public="1" set="null"><t path="UInt"/></fullScreenWidth>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<showDefaultContextMenu public="1"><e path="Bool"/></showDefaultContextMenu>
		<softKeyboardRect public="1"><c path="flash.geom.Rectangle"/></softKeyboardRect>
		<stage3Ds public="1"><c path="flash.Vector"><c path="flash.display.Stage3D"/></c></stage3Ds>
		<stageFocusRect public="1"><e path="Bool"/></stageFocusRect>
		<stageHeight public="1"><c path="Int"/></stageHeight>
		<stageVideos public="1"><c path="flash.Vector"><c path="flash.media.StageVideo"/></c></stageVideos>
		<stageWidth public="1"><c path="Int"/></stageWidth>
		<wmodeGPU public="1"><e path="Bool"/></wmodeGPU>
		<invalidate public="1" set="method"><f a=""><e path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><e path="Bool"/></f></isFocusInaccessible>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/flash9/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="36" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" get="inline" set="null" line="40" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="44" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="57" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="61" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="67" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="71" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="86" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="92" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="99" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="flash.filters.ColorMatrixFilter" params="" file="/usr/lib/haxe/std/flash9/filters/ColorMatrixFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<matrix public="1"><c path="Array"><d/></c></matrix>
		<new public="1" set="method"><f a="?matrix">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.BlurFilter" params="" file="/usr/lib/haxe/std/flash9/filters/BlurFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<quality public="1"><c path="Int"/></quality>
		<new public="1" set="method"><f a="?blurX:?blurY:?quality">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="display.TextFl" params="" file="src/display/TextFl.hx">
		<extends path="display.DisplayObjectFl"/>
		<implements path="interfaces.IExec"/>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<LINE_DELIMITER get="inline" set="null" line="18" static="1"><c path="EReg"/></LINE_DELIMITER>
		<WORD_DELIMITER get="inline" set="null" line="19" static="1"><c path="EReg"/></WORD_DELIMITER>
		<OUTLINE get="inline" set="null" line="20" static="1"><c path="flash.filters.GlowFilter"/></OUTLINE>
		<init public="1" set="method" line="22" static="1"><f a=""><e path="Void"/></f></init>
		<mapMethods public="1" set="method" line="27" static="1"><f a="execs">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></mapMethods>
		<getOutlineFilter get="inline" set="null" line="39" static="1"><f a="color">
	<c path="Int"/>
	<c path="flash.filters.GlowFilter"/>
</f></getOutlineFilter>
		<setFont get="inline" set="null" line="43" static="1"><f a="target:cssFontString">
	<c path="display.TextFl"/>
	<c path="String"/>
	<e path="Void"/>
</f></setFont>
		<setColor get="inline" set="null" line="55" static="1"><f a="target:cssColorString">
	<c path="display.TextFl"/>
	<c path="String"/>
	<e path="Void"/>
</f></setColor>
		<setOutline get="inline" set="null" line="67" static="1"><f a="target:outline">
	<c path="display.TextFl"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setOutline>
		<setLineWidth get="inline" set="null" line="76" static="1"><f a="target:wd">
	<c path="display.TextFl"/>
	<d/>
	<e path="Void"/>
</f></setLineWidth>
		<setLineHeight get="inline" set="null" line="82" static="1"><f a="target:ht">
	<c path="display.TextFl"/>
	<d/>
	<e path="Void"/>
</f></setLineHeight>
		<setTextAlign get="inline" set="null" line="87" static="1"><f a="target:align">
	<c path="display.TextFl"/>
	<c path="String"/>
	<e path="Void"/>
</f></setTextAlign>
		<setTextBaseline get="inline" set="null" line="92" static="1"><f a="target:baseline">
	<c path="display.TextFl"/>
	<c path="String"/>
	<e path="Void"/>
</f></setTextBaseline>
		<setText public="1" get="inline" set="null" line="101" static="1"><f a="target:text">
	<c path="display.TextFl"/>
	<c path="String"/>
	<e path="Void"/>
</f></setText>
		<tf><c path="flash.text.TextField"/></tf>
		<fmt><c path="flash.text.TextFormat"/></fmt>
		<baseline><c path="String"/></baseline>
		<align><c path="String"/></align>
		<text><c path="String"/></text>
		<lineWidth><c path="Float"/></lineWidth>
		<lineHeight><c path="Float"/></lineHeight>
		<outline><e path="Bool"/></outline>
		<updateBaseline set="method" line="132"><f a=""><e path="Void"/></f></updateBaseline>
		<updateLineHeight set="method" line="152"><f a=""><e path="Void"/></f></updateLineHeight>
		<updateAlign set="method" line="165"><f a=""><e path="Void"/></f></updateAlign>
		<updateText set="method" line="194">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Mimic the text application in EaselJS since we want as close as possible
	 * a match to that output.
	 </haxe_doc>
		</updateText>
		<exec public="1" get="inline" set="null" line="254">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this TextFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="116"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Control" params="" file="src/Control.hx">
		<items public="1" static="1"><c path="IntHash"><c path="interfaces.IExec"/></c></items>
		<containers public="1" static="1"><c path="IntHash"><c path="display.ContainerFl"/></c></containers>
		<displays public="1" static="1"><c path="IntHash"><c path="interfaces.IDisplayable"/></c></displays>
		<bitmapDatas public="1" static="1"><c path="IntHash"><c path="interfaces.IBitmapData"/></c></bitmapDatas>
		<bmpAnimations public="1" static="1"><c path="IntHash"><c path="display.BitmapAnimationFl"/></c></bmpAnimations>
		<graphicsList public="1" static="1"><c path="IntHash"><c path="display.GraphicsFl"/></c></graphicsList>
		<rectangles public="1" static="1"><c path="IntHash"><c path="geom.RectangleFl"/></c></rectangles>
		<frames public="1" static="1"><c path="IntHash"><c path="display.FrameFl"/></c></frames>
		<texts public="1" static="1"><c path="IntHash"><c path="display.TextFl"/></c></texts>
		<shadows public="1" static="1"><c path="IntHash"><c path="display.ShadowFl"/></c></shadows>
		<filters public="1" static="1"><c path="IntHash"><c path="interfaces.IBitmapFilter"/></c></filters>
		<makers public="1" static="1"><c path="Hash"><f a="">
	<c path="Int"/>
	<e path="Void"/>
</f></c></makers>
		<stageFl public="1" static="1"><c path="display.StageFl"/></stageFl>
		<init public="1" set="method" line="43" static="1"><f a=""><e path="Void"/></f></init>
		<createItems public="1" get="inline" set="null" line="92" static="1"><f a="a">
	<c path="Array"><c path="Array"><d/></c></c>
	<e path="Void"/>
</f></createItems>
		<changeItems public="1" get="inline" set="null" line="103" static="1"><f a="a">
	<c path="Array"><c path="Array"><d/></c></c>
	<e path="Void"/>
</f></changeItems>
		<invoke public="1" get="inline" set="null" line="114" static="1"><f a="cmd">
	<d/>
	<d/>
</f></invoke>
		<image get="inline" set="null" line="118" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></image>
		<bitmap get="inline" set="null" line="124" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></bitmap>
		<bitmapAnimation get="inline" set="null" line="130" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></bitmapAnimation>
		<shape get="inline" set="null" line="137" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></shape>
		<graphics get="inline" set="null" line="143" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></graphics>
		<container get="inline" set="null" line="149" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></container>
		<rectangle get="inline" set="null" line="156" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></rectangle>
		<frame get="inline" set="null" line="162" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></frame>
		<text get="inline" set="null" line="168" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></text>
		<shadow get="inline" set="null" line="175" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></shadow>
		<colorMatrixFilter get="inline" set="null" line="181" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></colorMatrixFilter>
		<colorFilter get="inline" set="null" line="187" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></colorFilter>
		<boxBlurFilter get="inline" set="null" line="193" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></boxBlurFilter>
		<stage get="inline" set="null" line="199" static="1"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></stage>
	</class>
	<class path="flash.net.NetStream" params="" file="/usr/lib/haxe/std/flash9/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" static="1"><c path="String"/></CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" static="1"><c path="String"/></DIRECT_CONNECTIONS>
		<audioCodec public="1" set="null"><t path="UInt"/></audioCodec>
		<audioReliable public="1"><e path="Bool"/></audioReliable>
		<audioSampleAccess public="1"><e path="Bool"/></audioSampleAccess>
		<backBufferLength public="1"><c path="Float"/></backBufferLength>
		<backBufferTime public="1"><c path="Float"/></backBufferTime>
		<bufferLength public="1" set="null"><c path="Float"/></bufferLength>
		<bufferTime public="1"><c path="Float"/></bufferTime>
		<bufferTimeMax public="1"><c path="Float"/></bufferTimeMax>
		<bytesLoaded public="1" set="null"><t path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><t path="UInt"/></bytesTotal>
		<checkPolicyFile public="1"><e path="Bool"/></checkPolicyFile>
		<client public="1"><d/></client>
		<currentFPS public="1" set="null"><c path="Float"/></currentFPS>
		<dataReliable public="1"><e path="Bool"/></dataReliable>
		<decodedFrames public="1" set="null"><t path="UInt"/></decodedFrames>
		<farID public="1" set="null"><c path="String"/></farID>
		<farNonce public="1" set="null"><c path="String"/></farNonce>
		<inBufferSeek public="1"><e path="Bool"/></inBufferSeek>
		<info public="1" set="null"><c path="flash.net.NetStreamInfo"/></info>
		<liveDelay public="1" set="null"><c path="Float"/></liveDelay>
		<maxPauseBufferTime public="1"><c path="Float"/></maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1"><e path="Bool"/></multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1"><c path="Float"/></multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1"><c path="Float"/></multicastFetchPeriod>
		<multicastInfo public="1"><c path="flash.net.NetStreamMulticastInfo"/></multicastInfo>
		<multicastPushNeighborLimit public="1"><c path="Float"/></multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1"><c path="Float"/></multicastRelayMarginDuration>
		<multicastWindowDuration public="1"><c path="Float"/></multicastWindowDuration>
		<nearNonce public="1" set="null"><c path="String"/></nearNonce>
		<objectEncoding public="1" set="null"><t path="UInt"/></objectEncoding>
		<peerStreams public="1" set="null"><c path="Array"><d/></c></peerStreams>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<time public="1" set="null"><c path="Float"/></time>
		<useHardwareDecoder public="1"><e path="Bool"/></useHardwareDecoder>
		<videoCodec public="1" set="null"><t path="UInt"/></videoCodec>
		<videoReliable public="1"><e path="Bool"/></videoReliable>
		<videoSampleAccess public="1"><e path="Bool"/></videoSampleAccess>
		<videoStreamSettings public="1"><c path="flash.media.VideoStreamSettings"/></videoStreamSettings>
		<appendBytes public="1"><f a="bytes">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></appendBytes>
		<appendBytesAction public="1"><f a="netStreamAppendBytesAction">
	<c path="String"/>
	<e path="Void"/>
</f></appendBytesAction>
		<attach public="1"><f a="connection">
	<c path="flash.net.NetConnection"/>
	<e path="Void"/>
</f></attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<e path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.media.Camera"/>
	<c path="Int"/>
	<e path="Void"/>
</f></attachCamera>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<onPeerConnect public="1" set="method"><f a="subscriber">
	<c path="flash.net.NetStream"/>
	<e path="Bool"/>
</f></onPeerConnect>
		<pause public="1" set="method"><f a=""><e path="Void"/></f></pause>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></play>
		<play2 public="1" set="method"><f a="param">
	<c path="flash.net.NetStreamPlayOptions"/>
	<e path="Void"/>
</f></play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<c path="Float"/>
	<e path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><e path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<c path="Float"/>
	<e path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></send>
		<step public="1"><f a="frames">
	<c path="Int"/>
	<e path="Void"/>
</f></step>
		<togglePause public="1" set="method"><f a=""><e path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="/usr/lib/haxe/std/flash9/display/GraphicsPathWinding.hx">
		<NON_ZERO/>
		<EVEN_ODD/>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="/usr/lib/haxe/std/flash9/display/StageDisplayState.hx">
		<NORMAL/>
		<FULL_SCREEN_INTERACTIVE/>
		<FULL_SCREEN/>
	</enum>
	<class path="filters.BoxBlurFilterFl" params="" file="src/filters/BoxBlurFilterFl.hx">
		<implements path="interfaces.IBitmapFilter"/>
		<implements path="interfaces.IExec"/>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<init public="1" set="method" line="16" static="1"><f a=""><e path="Void"/></f></init>
		<updateFilter get="inline" set="null" line="35" static="1">
			<f a="target:a">
				<c path="filters.BoxBlurFilterFl"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Change the filter's attributes
	 * @param ColorFilterFl
	 * @param Array
	 </haxe_doc>
		</updateFilter>
		<filter public="1" set="null"><c path="flash.filters.BitmapFilter"/></filter>
		<_filter><c path="flash.filters.BlurFilter"/></_filter>
		<exec public="1" get="inline" set="null" line="46">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this BoxBlurFilterFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="25"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="/usr/lib/haxe/std/flash9/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="/usr/lib/haxe/std/flash9/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<bytesLoaded public="1" set="null"><t path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><t path="UInt"/></bytesTotal>
		<childAllowsParent public="1" set="null"><e path="Bool"/></childAllowsParent>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<frameRate public="1" set="null"><c path="Float"/></frameRate>
		<height public="1" set="null"><c path="Int"/></height>
		<isURLInaccessible public="1"><e path="Bool"/></isURLInaccessible>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<parentAllowsChild public="1" set="null"><e path="Bool"/></parentAllowsChild>
		<sameDomain public="1" set="null"><e path="Bool"/></sameDomain>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<swfVersion public="1" set="null"><t path="UInt"/></swfVersion>
		<uncaughtErrorEvents public="1"><c path="flash.events.UncaughtErrorEvents"/></uncaughtErrorEvents>
		<url public="1" set="null"><c path="String"/></url>
		<width public="1" set="null"><c path="Int"/></width>
	</class>
	<class path="flash.display.ShaderData" params="" file="/usr/lib/haxe/std/flash9/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.LineScaleMode" params="" file="/usr/lib/haxe/std/flash9/display/LineScaleMode.hx">
		<VERTICAL/>
		<NORMAL/>
		<NONE/>
		<HORIZONTAL/>
	</enum>
	<class path="flash.display.Graphics" params="" file="/usr/lib/haxe/std/flash9/display/Graphics.hx" extern="1">
		<beginBitmapFill public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></beginBitmapFill>
		<beginFill public="1" set="method"><f a="color:?alpha">
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginFill>
		<beginGradientFill public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><t path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginGradientFill>
		<beginShaderFill public="1" set="method"><f a="shader:?matrix">
	<c path="flash.display.Shader"/>
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></beginShaderFill>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<copyFrom public="1" set="method"><f a="sourceGraphics">
	<c path="flash.display.Graphics"/>
	<e path="Void"/>
</f></copyFrom>
		<cubicCurveTo public="1"><f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method"><f a="graphicsData">
	<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
	<e path="Void"/>
</f></drawGraphicsData>
		<drawPath public="1" set="method"><f a="commands:data:?winding">
	<c path="flash.Vector"><c path="Int"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="flash.display.GraphicsPathWinding"/>
	<e path="Void"/>
</f></drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method"><f a="x:y:width:height:ellipseWidth:?ellipseHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method"><f a="vertices:?indices:?uvtData:?culling">
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="flash.Vector"><c path="Int"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="flash.display.TriangleCulling"/>
	<e path="Void"/>
</f></drawTriangles>
		<endFill public="1" set="method"><f a=""><e path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></lineBitmapStyle>
		<lineGradientStyle public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><t path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineGradientStyle>
		<lineShaderStyle public="1" set="method"><f a="shader:?matrix">
	<c path="flash.display.Shader"/>
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></lineShaderStyle>
		<lineStyle public="1" set="method"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="flash.display.LineScaleMode"/>
	<e path="flash.display.CapsStyle"/>
	<e path="flash.display.JointStyle"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Date" params="" file="/usr/lib/haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new date object.
	</haxe_doc>
		</new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="flash.display.BitmapData" params="" file="/usr/lib/haxe/std/flash9/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" set="null"><c path="Int"/></height>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<transparent public="1" set="null"><e path="Bool"/></transparent>
		<width public="1" set="null"><c path="Int"/></width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<e path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<d/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></copyPixels>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<draw public="1" set="method"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="flash.display.IBitmapDrawable"/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="flash.display.BlendMode"/>
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></draw>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?findColor">
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.Vector"><t path="UInt"/></c>
</f></getVector>
		<histogram public="1" set="method"><f a="?hRect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.Vector"><c path="flash.Vector"><c path="Float"/></c></c>
</f></histogram>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold">
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<d/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<e path="Bool"/>
</f></hitTest>
		<lock public="1" set="method"><f a=""><e path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></merge>
		<noise public="1" set="method"><f a="randomSeed:?low:?high:?channelOptions:?grayScale">
	<c path="Int"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<e path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method"><f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
	<c path="Float"/>
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"/></c>
	<e path="Void"/>
</f></perlinNoise>
		<pixelDissolve public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<c path="Int"/>
</f></pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></setPixels>
		<setVector public="1" set="method"><f a="rect:inputVector">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.Vector"><t path="UInt"/></c>
	<e path="Void"/>
</f></setVector>
		<threshold public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="String"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<t path="UInt"/>
</f></threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></unlock>
		<new public="1" set="method"><f a="width:height:?transparent:?fillColor">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Point" params="" file="/usr/lib/haxe/std/flash9/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<c path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<c path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<c path="Float"/>
	<c path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" set="null"><c path="Float"/></length>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1"><f a="sourcePoint">
	<c path="flash.geom.Point"/>
	<e path="Void"/>
</f></copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></equals>
		<normalize public="1" set="method"><f a="thickness">
	<c path="Float"/>
	<e path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<setTo public="1"><f a="xa:ya">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?x:?y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display3D.Program3D" params="" file="/usr/lib/haxe/std/flash9/display3D/Program3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></upload>
	</class>
	<class path="display.ShadowFl" params="" file="src/display/ShadowFl.hx">
		<implements path="interfaces.IWatchable"/>
		<implements path="interfaces.IExec"/>
		<INDEX public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></INDEX>
		<SHADOW_CHANGE get="inline" set="null" line="16" static="1"><c path="String"/></SHADOW_CHANGE>
		<dispatcher line="17" static="1"><c path="flash.events.EventDispatcher"/></dispatcher>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<init public="1" set="method" line="20" static="1"><f a=""><e path="Void"/></f></init>
		<updateShadow get="inline" set="null" line="31" static="1">
			<f a="target:args">
				<c path="display.ShadowFl"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Change the shadows attributes
	 * @param ShadowFl
	 * @param Array
	 </haxe_doc>
		</updateShadow>
		<getAngleFromOffsets get="inline" set="null" line="46" static="1"><f a="ox:oy">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></getAngleFromOffsets>
		<eventID><c path="String"/></eventID>
		<colorString><c path="String"/></colorString>
		<filter public="1" set="null"><c path="flash.filters.DropShadowFilter"/></filter>
		<watch public="1" get="inline" set="null" line="65">
			<f a="method">
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Add method to be called when bitmapdata changes
	 * @param Method
	 </haxe_doc>
		</watch>
		<unwatch public="1" get="inline" set="null" line="73">
			<f a="method">
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Remove method to be called when bitmapdata changes
	 * @param Method
	 </haxe_doc>
		</unwatch>
		<exec public="1" get="inline" set="null" line="82">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this ShadowFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="55"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.media.StageVideo" params="" file="/usr/lib/haxe/std/flash9/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<depth public="1"><c path="Int"/></depth>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<videoHeight public="1" set="null"><c path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><c path="Int"/></videoWidth>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<e path="Void"/>
</f></attachNetStream>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="utils.CubicBezier" params="" file="src/utils/Geometry.hx" module="utils.Geometry"><a>
	<c2><c path="flash.geom.Point"/></c2>
	<c1><c path="flash.geom.Point"/></c1>
	<a2><c path="flash.geom.Point"/></a2>
	<a1><c path="flash.geom.Point"/></a1>
</a></typedef>
	<typedef path="utils.CubicPair" params="" file="src/utils/Geometry.hx" module="utils.Geometry"><a>
	<b><t path="utils.CubicBezier"/></b>
	<a><t path="utils.CubicBezier"/></a>
</a></typedef>
	<class path="utils.Geometry" params="" file="src/utils/Geometry.hx">
		<intersectLines public="1" set="method" line="22" static="1">
			<f a="x1:y1:x2:y2:x3:y3:x4:y4">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="flash.geom.Point"/>
			</f>
			<haxe_doc> Geometry Utils </haxe_doc>
		</intersectLines>
		<midpoint public="1" get="inline" set="null" line="48" static="1"><f a="a:b">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></midpoint>
		<cubicBezierSplit public="1" set="method" line="52" static="1"><f a="bz">
	<t path="utils.CubicBezier"/>
	<t path="utils.CubicPair"/>
</f></cubicBezierSplit>
	</class>
	<class path="flash.system.LoaderContext" params="" file="/usr/lib/haxe/std/flash9/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1"><e path="Bool"/></allowCodeImport>
		<allowLoadBytesCodeExecution public="1"><e path="Bool"/></allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><e path="Bool"/></checkPolicyFile>
		<imageDecodingPolicy public="1"><e path="flash.system.ImageDecodingPolicy"/></imageDecodingPolicy>
		<parameters public="1"><d/></parameters>
		<requestedContentParent public="1"><c path="flash.display.DisplayObjectContainer"/></requestedContentParent>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<new public="1" set="method"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<e path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.PerspectiveProjection" params="" file="/usr/lib/haxe/std/flash9/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1"><c path="Float"/></fieldOfView>
		<focalLength public="1"><c path="Float"/></focalLength>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="59">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="75">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="89">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="String"/></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<typedef path="display.Command" params="" file="src/display/GraphicsFl.hx" module="display.GraphicsFl"><a>
	<method><c path="String"/></method>
	<arguments><d/></arguments>
</a></typedef>
	<class path="Math" params="" file="/usr/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="display.GraphicsFl" params="" file="src/display/GraphicsFl.hx">
		<implements path="interfaces.IExec"/>
		<QUART_PI get="inline" set="null" line="22" static="1"><c path="Float"/></QUART_PI>
		<HALF_PI get="inline" set="null" line="23" static="1"><c path="Float"/></HALF_PI>
		<TWO_PI get="inline" set="null" line="24" static="1"><c path="Float"/></TWO_PI>
		<CUBIC_PRECISION get="inline" set="null" line="25" static="1"><c path="Float"/></CUBIC_PRECISION>
		<IDENTITY_MATRIX get="inline" set="null" line="26" static="1"><c path="flash.geom.Matrix"/></IDENTITY_MATRIX>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<init public="1" set="method" line="30" static="1"><f a=""><e path="Void"/></f></init>
		<beginFill set="method" line="59" static="1"><f a="target:color">
	<c path="display.GraphicsFl"/>
	<c path="String"/>
	<e path="Void"/>
</f></beginFill>
		<beginBitmapFill set="method" line="71" static="1"><f a="target:args">
	<c path="display.GraphicsFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></beginBitmapFill>
		<setStrokeStyle get="inline" set="null" line="84" static="1"><f a="target:args">
	<c path="display.GraphicsFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></setStrokeStyle>
		<beginStroke get="inline" set="null" line="90" static="1"><f a="target:color">
	<c path="display.GraphicsFl"/>
	<c path="String"/>
	<e path="Void"/>
</f></beginStroke>
		<beginBitmapStroke get="inline" set="null" line="96" static="1"><f a="target:args">
	<c path="display.GraphicsFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></beginBitmapStroke>
		<endStroke get="inline" set="null" line="105" static="1"><f a="target:?nada">
	<c path="display.GraphicsFl"/>
	<d/>
	<e path="Void"/>
</f></endStroke>
		<endFill get="inline" set="null" line="110" static="1"><f a="target:?nada">
	<c path="display.GraphicsFl"/>
	<d/>
	<e path="Void"/>
</f></endFill>
		<closePath get="inline" set="null" line="118" static="1"><f a="target:?nada">
	<c path="display.GraphicsFl"/>
	<d/>
	<e path="Void"/>
</f></closePath>
		<moveTo get="inline" set="null" line="129" static="1">
			<f a="target:xy">
				<c path="display.GraphicsFl"/>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Move drawing head to a point
	 * 
	 </haxe_doc>
		</moveTo>
		<lineTo get="inline" set="null" line="137" static="1"><f a="target:xy">
	<c path="display.GraphicsFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></lineTo>
		<cubicCurveTo get="inline" set="null" line="146" static="1"><f a="target:pts">
	<c path="display.GraphicsFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></cubicCurveTo>
		<drawCubicApprox set="method" line="175" static="1">
			<f a="target:bz:tolerance:recurseCount">
				<c path="display.GraphicsFl"/>
				<t path="utils.CubicBezier"/>
				<c path="Float"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc> 
	 * Approximation of Cubic bezier using Quadratic bezier segments	
	 </haxe_doc>
		</drawCubicApprox>
		<quadraticCurveTo get="inline" set="null" line="210" static="1"><f a="target:pts">
	<c path="display.GraphicsFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></quadraticCurveTo>
		<drawRect get="inline" set="null" line="219" static="1"><f a="target:rct">
	<c path="display.GraphicsFl"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></drawRect>
		<clear get="inline" set="null" line="225" static="1"><f a="target:?nada">
	<c path="display.GraphicsFl"/>
	<d/>
	<e path="Void"/>
</f></clear>
		<drawPolyStar get="inline" set="null" line="244" static="1"><f a="target:args">
	<c path="display.GraphicsFl"/>
	<d/>
	<e path="Void"/>
</f></drawPolyStar>
		<drawRoundRect get="inline" set="null" line="282" static="1">
			<f a="target:rect">
				<c path="display.GraphicsFl"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Draw a simple round cornered rectangle
	 * @param GraphicsFl
	 * @param Array The arguments for the corresponding EaselJS method
	 </haxe_doc>
		</drawRoundRect>
		<drawRoundRectComplex get="inline" set="null" line="292" static="1">
			<f a="target:rect">
				<c path="display.GraphicsFl"/>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Draw a complex round cornered rectangle
	 * @param GraphicsFl
	 * @param Array The arguments for the corresponding EaselJS method
	 </haxe_doc>
		</drawRoundRectComplex>
		<drawCircle get="inline" set="null" line="302" static="1">
			<f a="target:circ">
				<c path="display.GraphicsFl"/>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Draw a circle
	 * @param GraphicsFl
	 * @param Array The arguments for the corresponding EaselJS method
	 </haxe_doc>
		</drawCircle>
		<drawEllipse get="inline" set="null" line="312" static="1">
			<f a="target:ell">
				<c path="display.GraphicsFl"/>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Draw an ellipse
	 * @param GraphicsFl
	 * @param Array The arguments for the corresponding EaselJS method
	 </haxe_doc>
		</drawEllipse>
		<drawArcTo get="inline" set="null" line="322" static="1">
			<f a="target:args">
				<c path="display.GraphicsFl"/>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Draw an arcTo
	 * @param GraphicsFl
	 * @param Array The arguments for the corresponding EaselJS method
	 </haxe_doc>
		</drawArcTo>
		<drawArc get="inline" set="null" line="365" static="1">
			<f a="target:args">
				<c path="display.GraphicsFl"/>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Draw an arc
	 * @param GraphicsFl
	 * @param Array The arguments for the corresponding EaselJS method
	 </haxe_doc>
		</drawArc>
		<watchBitmapData get="inline" set="null" line="447" static="1">
			<f a="target:bmpd">
				<c path="display.GraphicsFl"/>
				<c path="interfaces.IBitmapData"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Watch an IBitmapData for change, so that a redraw can be triggered.
	 </haxe_doc>
		</watchBitmapData>
		<graphics>
			<c path="flash.display.Graphics"/>
			<haxe_doc>** Instance variable and methods **</haxe_doc>
		</graphics>
		<strokeThickness><c path="Float"/></strokeThickness>
		<fillMethod><d/></fillMethod>
		<fillArgs><d/></fillArgs>
		<activeFill><e path="Bool"/></activeFill>
		<curX><c path="Float"/></curX>
		<curY><c path="Float"/></curY>
		<startX><c path="Float"/></startX>
		<startY><c path="Float"/></startY>
		<activePath><e path="Bool"/></activePath>
		<commands><c path="Array"><d/></c></commands>
		<bitmapDatas><c path="Array"><c path="interfaces.IBitmapData"/></c></bitmapDatas>
		<link public="1" get="inline" set="null" line="489">
			<f a="g">
				<c path="flash.display.Graphics"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Map this object to a graphics object from a DisplayObject
	 * @param Graphics
	 </haxe_doc>
		</link>
		<handleRedraw set="method" line="497">
			<f a="e">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Redraw when an IBitmapData on which this dependant
	 * has changed.
	 </haxe_doc>
		</handleRedraw>
		<checkFreshPath get="inline" set="null" line="508">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Store the first coordinates in a path, so that
	 * when closePath is called, it can be fulfilled
	 </haxe_doc>
		</checkFreshPath>
		<checkFreshFill get="inline" set="null" line="523">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * When drawing successive shapes without calling beginFill/endFill,
	 * Flash will knockout areas filled an even number of times, whereas
	 * EaselJS will simply fill them. 
	 </haxe_doc>
		</checkFreshFill>
		<exec public="1" get="inline" set="null" line="537">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this GraphicsFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="478"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="/usr/lib/haxe/std/flash9/display3D/Context3DCompareMode.hx">
		<NOT_EQUAL/>
		<NEVER/>
		<LESS_EQUAL/>
		<LESS/>
		<GREATER_EQUAL/>
		<GREATER/>
		<EQUAL/>
		<ALWAYS/>
	</enum>
	<class path="flash.display.Scene" params="" file="/usr/lib/haxe/std/flash9/display/Scene.hx" extern="1">
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<name public="1" set="null"><c path="String"/></name>
		<numFrames public="1" set="null"><c path="Int"/></numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.Responder" params="" file="/usr/lib/haxe/std/flash9/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<e path="Void"/>
</f></new></class>
	<class path="Main" params="" file="src/Main.hx">
		<DEFAULT_ID get="inline" set="null" line="20" static="1"><c path="String"/></DEFAULT_ID>
		<callbackMethod static="1"><c path="String"/></callbackMethod>
		<main public="1" set="method" line="24" static="1"><f a=""><e path="Void"/></f></main>
		<dispatch public="1" set="method" line="47" static="1"><f a="evt">
	<d/>
	<e path="Void"/>
</f></dispatch>
		<addedToStage set="method" line="37"><f a="?evt">
	<c path="flash.events.Event"/>
	<e path="Void"/>
</f></addedToStage>
		<init set="method" line="51"><f a="?evt">
	<c path="flash.events.Event"/>
	<e path="Void"/>
</f></init>
		<new public="1" set="method" line="28"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * TODO : 
 * - hitTestPoint : problematic if drawing commands haven't been flushed to Flash
 * - mouseenabled won't work on bitmap or shape ? wrap when necessary?
 * 
 </haxe_doc>
	</class>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="/usr/lib/haxe/std/flash9/media/MicrophoneEnhancedOptions.hx" extern="1">
		<autoGain public="1"><e path="Bool"/></autoGain>
		<echoPath public="1"><c path="Int"/></echoPath>
		<isVoiceDetected public="1"><c path="Int"/></isVoiceDetected>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<nonLinearProcessing public="1"><e path="Bool"/></nonLinearProcessing>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="/usr/lib/haxe/std/flash9/geom/Orientation3D.hx">
		<QUATERNION/>
		<EULER_ANGLES/>
		<AXIS_ANGLE/>
	</enum>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="flash.display3D.IndexBuffer3D" params="" file="/usr/lib/haxe/std/flash9/display3D/IndexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><t path="UInt"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></uploadFromVector>
	</class>
	<enum path="flash.text.AntiAliasType" params="" file="/usr/lib/haxe/std/flash9/text/AntiAliasType.hx">
		<NORMAL/>
		<ADVANCED/>
	</enum>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="/usr/lib/haxe/std/flash9/net/NetStreamMulticastInfo.hx" extern="1">
		<bytesPushedFromPeers public="1" set="null"><c path="Float"/></bytesPushedFromPeers>
		<bytesPushedToPeers public="1" set="null"><c path="Float"/></bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" set="null"><c path="Float"/></bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" set="null"><c path="Float"/></bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" set="null"><c path="Float"/></bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" set="null"><c path="Float"/></bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" set="null"><c path="Float"/></fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" set="null"><c path="Float"/></fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><c path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" set="null"><c path="Float"/></fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" set="null"><c path="Float"/></fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" set="null"><c path="Float"/></fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" set="null"><c path="Float"/></receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" set="null"><c path="Float"/></receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><c path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><c path="Float"/></receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" set="null"><c path="Float"/></sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><c path="Float"/></sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" set="null"><c path="Float"/></sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="/usr/lib/haxe/std/flash9/media/VideoStreamSettings.hx" extern="1">
		<bandwidth public="1" set="null"><c path="Int"/></bandwidth>
		<codec public="1" set="null"><c path="String"/></codec>
		<fps public="1" set="null"><c path="Float"/></fps>
		<height public="1" set="null"><c path="Int"/></height>
		<keyFrameInterval public="1" set="null"><c path="Int"/></keyFrameInterval>
		<quality public="1" set="null"><c path="Int"/></quality>
		<width public="1" set="null"><c path="Int"/></width>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<c path="Int"/>
	<e path="Void"/>
</f></setKeyFrameInterval>
		<setMode public="1" set="method"><f a="width:height:fps">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setMode>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="/usr/lib/haxe/std/flash9/ui/ContextMenuClipboardItems.hx" extern="1">
		<clear public="1"><e path="Bool"/></clear>
		<copy public="1"><e path="Bool"/></copy>
		<cut public="1"><e path="Bool"/></cut>
		<paste public="1"><e path="Bool"/></paste>
		<selectAll public="1"><e path="Bool"/></selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.utils.IDataOutput" params="" file="/usr/lib/haxe/std/flash9/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<e path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<t path="UInt"/>
	<e path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.media.SoundTransform" params="" file="/usr/lib/haxe/std/flash9/media/SoundTransform.hx" extern="1">
		<leftToLeft public="1"><c path="Float"/></leftToLeft>
		<leftToRight public="1"><c path="Float"/></leftToRight>
		<pan public="1"><c path="Float"/></pan>
		<rightToLeft public="1"><c path="Float"/></rightToLeft>
		<rightToRight public="1"><c path="Float"/></rightToRight>
		<volume public="1"><c path="Float"/></volume>
		<new public="1" set="method"><f a="?vol:?panning">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/flash9/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="32" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="36" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="40" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="47" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="51" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="/usr/lib/haxe/std/flash9/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT3/>
		<ACTIONSCRIPT2/>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="/usr/lib/haxe/std/flash9/display3D/Context3DStencilAction.hx">
		<ZERO/>
		<SET/>
		<KEEP/>
		<INVERT/>
		<INCREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<DECREMENT_SATURATE/>
	</enum>
	<class path="flash.events.Event" params="" file="/usr/lib/haxe/std/flash9/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" static="1"><c path="String"/></CHANGE>
		<CLEAR public="1" static="1"><c path="String"/></CLEAR>
		<CLOSE public="1" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" static="1"><c path="String"/></CONTEXT3D_CREATE>
		<COPY public="1" static="1"><c path="String"/></COPY>
		<CUT public="1" static="1"><c path="String"/></CUT>
		<DEACTIVATE public="1" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" static="1"><c path="String"/></EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1"><c path="String"/></FRAME_CONSTRUCTED>
		<FULLSCREEN public="1" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" static="1"><c path="String"/></ID3>
		<INIT public="1" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" static="1"><c path="String"/></OPEN>
		<PASTE public="1" static="1"><c path="String"/></PASTE>
		<REMOVED public="1" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" static="1"><c path="String"/></SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1"><c path="String"/></SOUND_COMPLETE>
		<TAB_CHILDREN_CHANGE public="1" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1"><c path="String"/></TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" static="1"><c path="String"/></UNLOAD>
		<bubbles public="1" set="null"><e path="Bool"/></bubbles>
		<cancelable public="1" set="null"><e path="Bool"/></cancelable>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<target public="1" set="null"><d/></target>
		<type public="1" set="null"><c path="String"/></type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<isDefaultPrevented public="1" set="method"><f a=""><e path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><e path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><e path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.MouseEvent" params="" file="/usr/lib/haxe/std/flash9/events/MouseEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<CLICK public="1" static="1"><c path="String"/></CLICK>
		<DOUBLE_CLICK public="1" static="1"><c path="String"/></DOUBLE_CLICK>
		<MOUSE_DOWN public="1" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT public="1" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER public="1" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP public="1" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" static="1"><c path="String"/></MOUSE_WHEEL>
		<ROLL_OUT public="1" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER public="1" static="1"><c path="String"/></ROLL_OVER>
		<altKey public="1"><e path="Bool"/></altKey>
		<buttonDown public="1"><e path="Bool"/></buttonDown>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<delta public="1"><c path="Int"/></delta>
		<isRelatedObjectInaccessible public="1"><e path="Bool"/></isRelatedObjectInaccessible>
		<localX public="1"><c path="Float"/></localX>
		<localY public="1"><c path="Float"/></localY>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<stageX public="1" set="null"><c path="Float"/></stageX>
		<stageY public="1" set="null"><c path="Float"/></stageY>
		<updateAfterEvent public="1" set="method"><f a=""><e path="Void"/></f></updateAfterEvent>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="flash.display.InteractiveObject"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="display.ShapeFl" params="" file="src/display/ShapeFl.hx">
		<extends path="display.DisplayObjectFl"/>
		<implements path="interfaces.IExec"/>
		<execs static="1"><c path="Hash"><d/></c></execs>
		<init public="1" set="method" line="13" static="1"><f a=""><e path="Void"/></f></init>
		<mapMethods public="1" set="method" line="18" static="1"><f a="execs">
	<c path="Hash"><d/></c>
	<e path="Void"/>
</f></mapMethods>
		<linkGraphics get="inline" set="null" line="23" static="1"><f a="target:id">
	<c path="display.ShapeFl"/>
	<c path="Int"/>
	<e path="Void"/>
</f></linkGraphics>
		<shape><c path="flash.display.Sprite"/></shape>
		<exec public="1" get="inline" set="null" line="41">
			<f a="method:?arguments">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
	 * Execute a method on this ShapeFl object
	 * @param String key corresponding to the method
	 * @param Array arguments for the method
	 </haxe_doc>
		</exec>
		<new public="1" set="method" line="30"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="/usr/lib/haxe/std/flash9/display3D/Context3DBlendFactor.hx">
		<ZERO/>
		<SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE/>
		<DESTINATION_COLOR/>
		<DESTINATION_ALPHA/>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="/usr/lib/haxe/std/flash9/text/TextInteractionMode.hx">
		<SELECTION/>
		<NORMAL/>
	</enum>
	<enum path="flash.display.SpreadMethod" params="" file="/usr/lib/haxe/std/flash9/display/SpreadMethod.hx">
		<REPEAT/>
		<REFLECT/>
		<PAD/>
	</enum>
	<enum path="flash.utils.Endian" params="" file="/usr/lib/haxe/std/flash9/utils/Endian.hx">
		<LITTLE_ENDIAN/>
		<BIG_ENDIAN/>
	</enum>
	<enum path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="UInt" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Int"/>
		<haxe_doc>
	The unsigned Int type is only defined for Flash9. It's currently
	handled the same as a normal Int.
</haxe_doc>
	</typedef>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<enum path="flash.events.EventPhase" params="" file="/usr/lib/haxe/std/flash9/events/EventPhase.hx">
		<CAPTURING_PHASE/>
		<BUBBLING_PHASE/>
		<AT_TARGET/>
	</enum>
	<class path="flash.display.Bitmap" params="" file="/usr/lib/haxe/std/flash9/display/Bitmap.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<pixelSnapping public="1"><e path="flash.display.PixelSnapping"/></pixelSnapping>
		<smoothing public="1"><e path="Bool"/></smoothing>
		<new public="1" set="method"><f a="?bitmapData:?pixelSnapping:?smoothing">
	<c path="flash.display.BitmapData"/>
	<e path="flash.display.PixelSnapping"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.TextFieldType" params="" file="/usr/lib/haxe/std/flash9/text/TextFieldType.hx">
		<INPUT/>
		<DYNAMIC/>
	</enum>
	<class path="flash.net.NetConnection" params="" file="/usr/lib/haxe/std/flash9/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><t path="UInt"/></defaultObjectEncoding>
		<client public="1"><d/></client>
		<connected public="1" set="null"><e path="Bool"/></connected>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<farID public="1" set="null"><c path="String"/></farID>
		<farNonce public="1" set="null"><c path="String"/></farNonce>
		<maxPeerConnections public="1"><t path="UInt"/></maxPeerConnections>
		<nearID public="1" set="null"><c path="String"/></nearID>
		<nearNonce public="1" set="null"><c path="String"/></nearNonce>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<proxyType public="1"><c path="String"/></proxyType>
		<unconnectedPeerStreams public="1" set="null"><c path="Array"><d/></c></unconnectedPeerStreams>
		<uri public="1" set="null"><c path="String"/></uri>
		<usingTLS public="1" set="null"><e path="Bool"/></usingTLS>
		<addHeader public="1" set="method"><f a="operation:?mustUnderstand:?param">
	<c path="String"/>
	<e path="Bool"/>
	<d/>
	<e path="Void"/>
</f></addHeader>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></connect>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.utils.IDataInput" params="" file="/usr/lib/haxe/std/flash9/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" set="null"><t path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<t path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<t path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedShort>
	</class>
	<class path="flash.geom.Vector3D" params="" file="/usr/lib/haxe/std/flash9/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></distance>
		<length public="1" set="null"><c path="Float"/></length>
		<lengthSquared public="1" set="null"><c path="Float"/></lengthSquared>
		<w public="1"><c path="Float"/></w>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<z public="1"><c path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1"><f a="sourceVector3D">
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></dotProduct>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></equals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></nearEquals>
		<negate public="1" set="method"><f a=""><e path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><c path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><e path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<c path="Float"/>
	<e path="Void"/>
</f></scaleBy>
		<setTo public="1"><f a="xa:ya:za">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?x:?y:?z:?w">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="/usr/lib/haxe/std/flash9/display3D/VertexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></uploadFromVector>
	</class>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="/usr/lib/haxe/std/flash9/display3D/Context3DVertexBufferFormat.hx">
		<FLOAT_4/>
		<FLOAT_3/>
		<FLOAT_2/>
		<FLOAT_1/>
		<BYTES_4/>
	</enum>
	<class path="flash.text.TextField" params="" file="/usr/lib/haxe/std/flash9/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1"><f a="fontName:fontStyle">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></isFontCompatible>
		<alwaysShowSelection public="1"><e path="Bool"/></alwaysShowSelection>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<background public="1"><e path="Bool"/></background>
		<backgroundColor public="1"><t path="UInt"/></backgroundColor>
		<border public="1"><e path="Bool"/></border>
		<borderColor public="1"><t path="UInt"/></borderColor>
		<bottomScrollV public="1" set="null"><c path="Int"/></bottomScrollV>
		<caretIndex public="1" set="null"><c path="Int"/></caretIndex>
		<condenseWhite public="1"><e path="Bool"/></condenseWhite>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1"><e path="Bool"/></displayAsPassword>
		<embedFonts public="1"><e path="Bool"/></embedFonts>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1" set="null"><c path="Int"/></length>
		<maxChars public="1"><c path="Int"/></maxChars>
		<maxScrollH public="1" set="null"><c path="Int"/></maxScrollH>
		<maxScrollV public="1" set="null"><c path="Int"/></maxScrollV>
		<mouseWheelEnabled public="1"><e path="Bool"/></mouseWheelEnabled>
		<multiline public="1"><e path="Bool"/></multiline>
		<numLines public="1" set="null"><c path="Int"/></numLines>
		<restrict public="1"><c path="String"/></restrict>
		<scrollH public="1"><c path="Int"/></scrollH>
		<scrollV public="1"><c path="Int"/></scrollV>
		<selectable public="1"><e path="Bool"/></selectable>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectionBeginIndex public="1" set="null"><c path="Int"/></selectionBeginIndex>
		<selectionEndIndex public="1" set="null"><c path="Int"/></selectionEndIndex>
		<sharpness public="1"><c path="Float"/></sharpness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><t path="UInt"/></textColor>
		<textHeight public="1" set="null"><c path="Float"/></textHeight>
		<textInteractionMode public="1"><e path="flash.text.TextInteractionMode"/></textInteractionMode>
		<textWidth public="1" set="null"><c path="Float"/></textWidth>
		<thickness public="1"><c path="Float"/></thickness>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<useRichTextClipboard public="1"><e path="Bool"/></useRichTextClipboard>
		<wordWrap public="1"><e path="Bool"/></wordWrap>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<e path="Void"/>
</f></appendText>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getFirstCharInParagraph>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineIndexOfChar>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineLength>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.text.TextFormat"/>
</f></getTextFormat>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></insertXMLText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<e path="Bool"/>
</f></pasteRichText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></replaceSelectedText>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></replaceText>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method"><f a="format:?beginIndex:?endIndex">
	<c path="flash.text.TextFormat"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setTextFormat>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.URLRequest" params="" file="/usr/lib/haxe/std/flash9/net/URLRequest.hx" extern="1">
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><d/></data>
		<digest public="1"><c path="String"/></digest>
		<method public="1"><c path="String"/></method>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.RegExp" params="" file="/usr/lib/haxe/std/flash9/utils/RegExp.hx" extern="1">
		<dotall public="1" set="null"><e path="Bool"/></dotall>
		<extended public="1" set="null"><e path="Bool"/></extended>
		<global public="1" set="null"><e path="Bool"/></global>
		<ignoreCase public="1" set="null"><e path="Bool"/></ignoreCase>
		<lastIndex public="1"><c path="Int"/></lastIndex>
		<multiline public="1" set="null"><e path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<exec public="1" set="method"><f a="?s">
	<c path="String"/>
	<d/>
</f></exec>
		<test public="1" set="method"><f a="?s">
	<c path="String"/>
	<e path="Bool"/>
</f></test>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Vector" params="T" file="/usr/lib/haxe/std/flash9/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="26" static="1"><f a="v">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="flash.Vector"><c path="ofArray.T"/></c>
</f></ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="30" static="1"><f a="v">
	<c path="flash.Vector"><c path="convert.T"/></c>
	<c path="flash.Vector"><c path="convert.U"/></c>
</f></convert>
		<length public="1"><t path="UInt"/></length>
		<fixed public="1"><e path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><e path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<e path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="pos:?end">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<c path="Int"/>
	</f>
	<e path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
	<c path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
	<c path="Int"/>
</f></lastIndexOf>
		<new public="1" set="method"><f a="?length:?fixed">
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	The Vector class is very similar to Array but is only supported by the Flash Player 10+
</haxe_doc>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="/usr/lib/haxe/std/flash9/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:?miplevel">
	<c path="flash.display.BitmapData"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadFromByteArray>
	</class>
	<enum path="flash.display.StageScaleMode" params="" file="/usr/lib/haxe/std/flash9/display/StageScaleMode.hx">
		<SHOW_ALL/>
		<NO_SCALE/>
		<NO_BORDER/>
		<EXACT_FIT/>
	</enum>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="/usr/lib/haxe/std/flash9/system/ImageDecodingPolicy.hx">
		<ON_LOAD/>
		<ON_DEMAND/>
	</enum>
	<enum path="flash.media.SoundCodec" params="" file="/usr/lib/haxe/std/flash9/media/SoundCodec.hx">
		<SPEEX/>
		<PCMU/>
		<PCMA/>
		<NELLYMOSER/>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="/usr/lib/haxe/std/flash9/display3D/Context3DTextureFormat.hx">
		<COMPRESSED/>
		<BGRA/>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="/usr/lib/haxe/std/flash9/text/GridFitType.hx">
		<SUBPIXEL/>
		<PIXEL/>
		<NONE/>
	</enum>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="/usr/lib/haxe/std/flash9/media/MicrophoneEnhancedMode.hx">
		<SPEAKER_MUTE/>
		<OFF/>
		<HEADSET/>
		<HALF_DUPLEX/>
		<FULL_DUPLEX/>
	</enum>
	<enum path="flash.display.BlendMode" params="" file="/usr/lib/haxe/std/flash9/display/BlendMode.hx">
		<SUBTRACT/>
		<SHADER/>
		<SCREEN/>
		<OVERLAY/>
		<NORMAL/>
		<MULTIPLY/>
		<LIGHTEN/>
		<LAYER/>
		<INVERT/>
		<HARDLIGHT/>
		<ERASE/>
		<DIFFERENCE/>
		<DARKEN/>
		<ALPHA/>
		<ADD/>
	</enum>
	<class path="flash.utils.ByteArray" params="" file="/usr/lib/haxe/std/flash9/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput"/>
		<implements path="flash.utils.IDataOutput"/>
		<defaultObjectEncoding public="1" static="1"><t path="UInt"/></defaultObjectEncoding>
		<bytesAvailable public="1" set="null"><t path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<length public="1"><t path="UInt"/></length>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<position public="1"><t path="UInt"/></position>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<compress public="1" set="method"><f a=""><e path="Void"/></f></compress>
		<deflate public="1" set="method"><f a=""><e path="Void"/></f></deflate>
		<inflate public="1" set="method"><f a=""><e path="Void"/></f></inflate>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<t path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<t path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedShort>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a=""><e path="Void"/></f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<e path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<t path="UInt"/>
	<e path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="/usr/lib/haxe/std/flash9/display3D/Context3DTriangleFace.hx">
		<NONE/>
		<FRONT_AND_BACK/>
		<FRONT/>
		<BACK/>
	</enum>
	<class path="flash.ui.ContextMenu" params="" file="/usr/lib/haxe/std/flash9/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<clipboardItems public="1"><c path="flash.ui.ContextMenuClipboardItems"/></clipboardItems>
		<clipboardMenu public="1"><e path="Bool"/></clipboardMenu>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<link public="1"><c path="flash.net.URLRequest"/></link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<hideBuiltInItems public="1" set="method"><f a=""><e path="Void"/></f></hideBuiltInItems>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.Loader" params="" file="/usr/lib/haxe/std/flash9/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<uncaughtErrorEvents public="1"><c path="flash.events.UncaughtErrorEvents"/></uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<e path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<e path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><e path="Void"/></f></unload>
		<unloadAndStop public="1" set="method"><f a="?gc">
	<e path="Bool"/>
	<e path="Void"/>
</f></unloadAndStop>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.display.StageQuality" params="" file="/usr/lib/haxe/std/flash9/display/StageQuality.hx">
		<MEDIUM/>
		<LOW/>
		<HIGH/>
		<BEST/>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="/usr/lib/haxe/std/flash9/display/JointStyle.hx">
		<ROUND/>
		<MITER/>
		<BEVEL/>
	</enum>
	<class path="flash.display3D.Context3D" params="" file="/usr/lib/haxe/std/flash9/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<driverInfo public="1" set="null"><c path="String"/></driverInfo>
		<enableErrorChecking public="1"><e path="Bool"/></enableErrorChecking>
		<clear public="1" set="method"><f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></clear>
		<configureBackBuffer public="1" set="method"><f a="width:height:antiAlias:?enableDepthAndStencil">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></configureBackBuffer>
		<createCubeTexture public="1" set="method"><f a="size:format:optimizeForRenderToTexture">
	<c path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<e path="Bool"/>
	<c path="flash.display3D.textures.CubeTexture"/>
</f></createCubeTexture>
		<createIndexBuffer public="1" set="method"><f a="numIndices">
	<c path="Int"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createTexture public="1" set="method"><f a="width:height:format:optimizeForRenderToTexture">
	<c path="Int"/>
	<c path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<e path="Bool"/>
	<c path="flash.display3D.textures.Texture"/>
</f></createTexture>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<e path="Void"/>
</f></drawToBitmapData>
		<drawTriangles public="1" set="method"><f a="indexBuffer:?firstIndex:?numTriangles">
	<c path="flash.display3D.IndexBuffer3D"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></drawTriangles>
		<present public="1" set="method"><f a=""><e path="Void"/></f></present>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="Void"/>
</f></setBlendFactors>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setColorMask>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="Void"/>
</f></setCulling>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<e path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="Void"/>
</f></setDepthTest>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<e path="Void"/>
</f></setProgram>
		<setProgramConstantsFromMatrix public="1" set="method"><f a="programType:firstRegister:matrix:?transposedMatrix">
	<e path="flash.display3D.Context3DProgramType"/>
	<c path="Int"/>
	<c path="flash.geom.Matrix3D"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setProgramConstantsFromMatrix>
		<setProgramConstantsFromVector public="1" set="method"><f a="programType:firstRegister:data:?numRegisters">
	<e path="flash.display3D.Context3DProgramType"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></setProgramConstantsFromVector>
		<setRenderToBackBuffer public="1" set="method"><f a=""><e path="Void"/></f></setRenderToBackBuffer>
		<setRenderToTexture public="1" set="method"><f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector">
	<c path="flash.display3D.textures.TextureBase"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setRenderToTexture>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></setScissorRectangle>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="Void"/>
</f></setStencilActions>
		<setStencilReferenceValue public="1" set="method"><f a="referenceValue:?readMask:?writeMask">
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></setStencilReferenceValue>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<c path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<e path="Void"/>
</f></setTextureAt>
		<setVertexBufferAt public="1" set="method"><f a="index:buffer:?bufferOffset:?format">
	<c path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
	<c path="Int"/>
	<e path="flash.display3D.Context3DVertexBufferFormat"/>
	<e path="Void"/>
</f></setVertexBufferAt>
	</class>
	<class path="flash.display.Shader" params="" file="/usr/lib/haxe/std/flash9/display/Shader.hx" extern="1">
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/usr/lib/haxe/std/flash9/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><c path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><c path="Float"/></alphaOffset>
		<blueMultiplier public="1"><c path="Float"/></blueMultiplier>
		<blueOffset public="1"><c path="Float"/></blueOffset>
		<color public="1"><t path="UInt"/></color>
		<greenMultiplier public="1"><c path="Float"/></greenMultiplier>
		<greenOffset public="1"><c path="Float"/></greenOffset>
		<redMultiplier public="1"><c path="Float"/></redMultiplier>
		<redOffset public="1"><c path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></concat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
</haxe>